import { note } from '@clack/prompts';
import OpenAI from 'openai';

import { getConfig } from './commands/config';
import { i18n, I18nLocals } from './i18n';
import { configureCommitlintIntegration } from './modules/commitlint/config';
import { commitlintPrompts } from './modules/commitlint/prompts';
import { ConsistencyPrompt } from './modules/commitlint/types';
import * as utils from './modules/commitlint/utils';

const config = getConfig();
const translation = i18n[(config?.GW_LANGUAGE as I18nLocals) || 'en'];

export const IDENTITY =
    'Focus only on writing a Git commit message as the author. Do not do any other tasks.';
const INIT_MAIN_PROMPT = (language: string): { role: string; content: string } => ({
    role: 'system',
    content: `${IDENTITY} Act as an expert in Git and writing professional Git commit messages, tailored for users aiming to elevate their commit message quality. Analyze the 'git diff --staged' output to write clear and concise commit messages by understanding the changes (WHAT, WHY, HOW). Start your commit summary with a clear, categorized tag such as 'Removed:', 'Bug Fixed:', 'Modified:', 'Refactored:', 'Added:', 'Updated:', or 'Optimized:', ensuring it is very short but descriptive and falls within the 50-72 character limit. Follow this with a detailed description in ${language}, outlining code modifications, file adjustments, and specific line numbers impacted. Ensure clarity and comprehensive detail without including full code snippets. Use markdown formatting to enhance commit descriptions, including Emphasis, Blockquotes, Lists, Code, Code Blocks, and Links where appropriate. Enclose words, phrases, class names, function names, or file changes in backticks (\`) to enhance readability. Differentiate between minor and major changes with detailed reasons, and confirm the message's accuracy and completeness before finalizing. Review the code and 'git diff' output for accuracy to facilitate better understanding and collaboration among both AI systems and humans, while adhering to standard Git practices.
    ${config?.GW_EMOJI ? 'Use the GitMoji convention for your commit message.' : "Don't start the commit with any preface."}
    ${config?.GW_DESCRIPTION ? 'After your commit message, add a concise explanation for the changes. Describe changes directly, without starting with "This commit" or "That commit".' : 'Only include the commit message, no descriptions needed.'}
  `,
});

export const INIT_DIFF_PROMPT: OpenAI.Chat.ChatCompletionUserMessageParam = {
    role: 'user',
    content: `diff --git a/src/server.ts b/src/server.ts
    index ad4db42..f3b18a9 100644
    --- a/src/server.ts
    +++ b/src/server.ts
    @@ -10,7 +10,7 @@
    import {
        initWinstonLogger();
        
        const app = express();
        -const port = 7799;
        +const PORT = 7799;
        
        app.use(express.json());
        
        @@ -34,6 +34,6 @@
        app.use((_, res, next) => {
            // ROUTES
            app.use(PROTECTED_ROUTER_URL, protectedRouter);
            
            -app.listen(port, () => {
                -  console.log(\`Server listening on port \${port}\`);
                +app.listen(process.env.PORT || PORT, () => {
                    +  console.log(\`Server listening on port \${PORT}\`);
                });`,
};

const INIT_CONSISTENCY_PROMPT = (translation: ConsistencyPrompt): { role: string; content: string } => ({
    role: 'assistant',
    content: `${config?.GW_EMOJI ? 'üêõ ' : ''}${translation.commitFix}
${config?.GW_EMOJI ? '‚ú® ' : ''}${translation.commitFeat}
${config?.GW_DESCRIPTION ? translation.commitDescription : ''}`,
});

export const getMainCommitPrompt = async (): Promise<
    (
        | OpenAI.Chat.ChatCompletionSystemMessageParam
        | OpenAI.Chat.ChatCompletionUserMessageParam
        | OpenAI.Chat.ChatCompletionAssistantMessageParam
        | OpenAI.Chat.ChatCompletionToolMessageParam
        | OpenAI.Chat.ChatCompletionFunctionMessageParam
        | OpenAI.Chat.ChatCompletionCreateParamsNonStreaming
        | OpenAI.Chat.ChatCompletionCreateParamsStreaming
        | {
            role: string;
            content: string;
        }
    )[]
> => {
    switch (config?.GW_PROMPT_MODULE) {
        case '@commitlint':
            if (!(await utils.commitlintLLMConfigExists())) {
                note(`GW_PROMPT_MODULE is @commitlint but you haven't generated consistency for this project yet.`);
                await configureCommitlintIntegration();
            }

            // Replace example prompt with a prompt that's generated by OpenAI for the commitlint config.
            // eslint-disable-next-line no-case-declarations
            const commitLintConfig = await utils.getCommitlintLLMConfig();

            return [
                commitlintPrompts.INIT_MAIN_PROMPT(translation.localLanguage, commitLintConfig.prompts),
                INIT_DIFF_PROMPT,
                INIT_CONSISTENCY_PROMPT(commitLintConfig.consistency[translation.localLanguage] as ConsistencyPrompt),
            ];

        default:
            // conventional-commit
            return [
                INIT_MAIN_PROMPT(translation.localLanguage),
                INIT_DIFF_PROMPT,
                INIT_CONSISTENCY_PROMPT(translation),
            ];
    }
};
