import {
  ChatCompletionRequestMessage,
  ChatCompletionRequestMessageRoleEnum
} from 'openai';

import { note } from '@clack/prompts';

import { getConfig } from './commands/config';
import { i18n, I18nLocals } from './i18n';
import { configureCommitlintIntegration } from './modules/commitlint/config';
import { commitlintPrompts } from './modules/commitlint/prompts';
import { ConsistencyPrompt } from './modules/commitlint/types';
import * as utils from './modules/commitlint/utils';

const config = getConfig();
const translation = i18n[(config?.GWZ_LANGUAGE as I18nLocals) || 'en'];

export const IDENTITY =
  'You are to act as the author of a commit message in git.';

const INIT_MAIN_PROMPT = (language: string): ChatCompletionRequestMessage => ({
  role: ChatCompletionRequestMessageRoleEnum.System,
  content: `${IDENTITY} Your mission is to analyze the output of the 'git diff --staged' command and create clean, comprehensive commit messages. Follow these steps:
    1. Understanding Changes: Examine the 'git diff --staged' output to understand WHAT were the changes and WHY they were done.
    2. Summarize Changes: Write precise, informative summaries under 50 characters, outlining the changes.
    3. Detailed Descriptions: 
       - Reasons for Changes: Explain the rationale behind the changes.
       - Effects: Describe the impact of the changes.
       - Necessity: Clarify the need for the change.
       - Context: Detail what the changes refer to.
    - Use ${language} for the commit message, ensuring it's conversational, fluent, and easily understandable.
    - Review the code and 'git diff' output to ensure messages accurately reflect changes.
    - Distinguish minor and major changes, providing detailed rationales.
    - Confirm accuracy and completeness against the code changes before finalizing.
    ${
      config?.GWZ_EMOJI
        ? 'Use GitMoji convention to preface the commit.'
        : 'Do not preface the commit with anything.'
    }
    ${
      config?.GWZ_DESCRIPTION
        ? 'Add a short description of WHY the changes are done after the commit message. Don\'t start it with "This commit", just describe the changes.'
        : "Don't add any descriptions to the commit, only commit message."
    }
    Use the present tense. Lines must not be longer than 50 characters.`
});

export const INIT_DIFF_PROMPT: ChatCompletionRequestMessage = {
  role: ChatCompletionRequestMessageRoleEnum.User,
  content: `diff --git a/src/server.ts b/src/server.ts
    index ad4db42..f3b18a9 100644
    --- a/src/server.ts
    +++ b/src/server.ts
    @@ -10,7 +10,7 @@
    import {
        initWinstonLogger();
        
        const app = express();
        -const port = 7799;
        +const PORT = 7799;
        
        app.use(express.json());
        
        @@ -34,6 +34,6 @@
        app.use((_, res, next) => {
            // ROUTES
            app.use(PROTECTED_ROUTER_URL, protectedRouter);
            
            -app.listen(port, () => {
                -  console.log(\`Server listening on port \${port}\`);
                +app.listen(process.env.PORT || PORT, () => {
                    +  console.log(\`Server listening on port \${PORT}\`);
                });`
};

const INIT_CONSISTENCY_PROMPT = (
  translation: ConsistencyPrompt
): ChatCompletionRequestMessage => ({
  role: ChatCompletionRequestMessageRoleEnum.Assistant,
  content: `${config?.GWZ_EMOJI ? 'üêõ ' : ''}${translation.commitFix}
${config?.GWZ_EMOJI ? '‚ú® ' : ''}${translation.commitFeat}
${config?.GWZ_DESCRIPTION ? translation.commitDescription : ''}`
});

export const getMainCommitPrompt = async (): Promise<
  ChatCompletionRequestMessage[]
> => {
  switch (config?.GWZ_PROMPT_MODULE) {
    case '@commitlint':
      if (!(await utils.commitlintLLMConfigExists())) {
        note(
          `GWZ_PROMPT_MODULE is @commitlint but you haven't generated consistency for this project yet.`
        );
        await configureCommitlintIntegration();
      }

      // Replace example prompt with a prompt that's generated by OpenAI for the commitlint config.
      const commitLintConfig = await utils.getCommitlintLLMConfig();

      return [
        commitlintPrompts.INIT_MAIN_PROMPT(
          translation.localLanguage,
          commitLintConfig.prompts
        ),
        INIT_DIFF_PROMPT,
        INIT_CONSISTENCY_PROMPT(
          commitLintConfig.consistency[
            translation.localLanguage
          ] as ConsistencyPrompt
        )
      ];

    default:
      // conventional-commit
      return [
        INIT_MAIN_PROMPT(translation.localLanguage),
        INIT_DIFF_PROMPT,
        INIT_CONSISTENCY_PROMPT(translation)
      ];
  }
};
