import { note } from '@clack/prompts';
import OpenAI from 'openai';

import { getConfig } from './commands/config';
import { i18n, I18nLocals } from './i18n';
import { configureCommitlintIntegration } from './modules/commitlint/config';
import { commitlintPrompts } from './modules/commitlint/prompts';
import { ConsistencyPrompt } from './modules/commitlint/types';
import * as utils from './modules/commitlint/utils';

const config = getConfig();
const translation = i18n[(config?.GW_LANGUAGE as I18nLocals) || 'en'];

export const IDENTITY =
    'Focus solely on crafting a git commit message as the author, without deviating to other tasks.';
const INIT_MAIN_PROMPT = (language: string): { role: string; content: string } => ({
    role: 'system',
    content: `${IDENTITY} Check the 'git diff --staged' results and write clear, concise commit messages by first understanding the changes (WHAT and WHY) from the 'git diff --staged' output. Summarize these in present tense, keeping them under 50 characters. In your detailed descriptions, explain the reasons, impact, necessity, and context of the changes. Use markdown formatting to enhance your commit descriptions. Stick to these rules: add Emphasis, Blockquotes, Lists, Code, Code Blocks, and Links where they make sense. This approach will not only clarify your points but also give them more impact. Remember, it's crucial to strictly follow these formatting guidelines. Remember, for denoting words, phrases, class names, function names, or file changes as code, enclose them in backticks (\`) to enhance readability. Write the commit message in ${language}, ensuring it's conversational and clear. Review the code and 'git diff' output for message accuracy, differentiate between minor and major changes with detailed reasons, and confirm the message's accuracy and completeness against the code changes before finalizing.
    ${
        config?.GW_EMOJI
            ? 'Use the GitMoji convention for your commit message.'
            : "Don't start the commit with any preface."
    }
    ${
        config?.GW_DESCRIPTION
            ? "When crafting your git description, apply markdown formatting where appropriate, using Emphasis, Blockquotes, Lists, Code, Code Blocks, and Links for clarity and impact. Remember, for denoting words, phrases, class names, function names, or file changes as code, enclose them in backticks (`) to enhance readability. After your commit message, add a concise explanation for the changes. Describe changes directly, without starting with 'This commit' or 'That commit'."
            : 'Only include the commit message, no descriptions needed.'
    }
  `,
});

export const INIT_DIFF_PROMPT: OpenAI.Chat.ChatCompletionUserMessageParam = {
    role: 'user',
    content: `diff --git a/src/server.ts b/src/server.ts
    index ad4db42..f3b18a9 100644
    --- a/src/server.ts
    +++ b/src/server.ts
    @@ -10,7 +10,7 @@
    import {
        initWinstonLogger();
        
        const app = express();
        -const port = 7799;
        +const PORT = 7799;
        
        app.use(express.json());
        
        @@ -34,6 +34,6 @@
        app.use((_, res, next) => {
            // ROUTES
            app.use(PROTECTED_ROUTER_URL, protectedRouter);
            
            -app.listen(port, () => {
                -  console.log(\`Server listening on port \${port}\`);
                +app.listen(process.env.PORT || PORT, () => {
                    +  console.log(\`Server listening on port \${PORT}\`);
                });`,
};

const INIT_CONSISTENCY_PROMPT = (translation: ConsistencyPrompt): { role: string; content: string } => ({
    role: 'assistant',
    content: `${config?.GW_EMOJI ? 'üêõ ' : ''}${translation.commitFix}
${config?.GW_EMOJI ? '‚ú® ' : ''}${translation.commitFeat}
${config?.GW_DESCRIPTION ? translation.commitDescription : ''}`,
});

export const getMainCommitPrompt = async (): Promise<
    (
        | OpenAI.Chat.ChatCompletionSystemMessageParam
        | OpenAI.Chat.ChatCompletionUserMessageParam
        | OpenAI.Chat.ChatCompletionAssistantMessageParam
        | OpenAI.Chat.ChatCompletionToolMessageParam
        | OpenAI.Chat.ChatCompletionFunctionMessageParam
        | OpenAI.Chat.ChatCompletionCreateParamsNonStreaming
        | OpenAI.Chat.ChatCompletionCreateParamsStreaming
        | {
              role: string;
              content: string;
          }
    )[]
> => {
    switch (config?.GW_PROMPT_MODULE) {
        case '@commitlint':
            if (!(await utils.commitlintLLMConfigExists())) {
                note(`GW_PROMPT_MODULE is @commitlint but you haven't generated consistency for this project yet.`);
                await configureCommitlintIntegration();
            }

            // Replace example prompt with a prompt that's generated by OpenAI for the commitlint config.
            // eslint-disable-next-line no-case-declarations
            const commitLintConfig = await utils.getCommitlintLLMConfig();

            return [
                commitlintPrompts.INIT_MAIN_PROMPT(translation.localLanguage, commitLintConfig.prompts),
                INIT_DIFF_PROMPT,
                INIT_CONSISTENCY_PROMPT(commitLintConfig.consistency[translation.localLanguage] as ConsistencyPrompt),
            ];

        default:
            // conventional-commit
            return [
                INIT_MAIN_PROMPT(translation.localLanguage),
                INIT_DIFF_PROMPT,
                INIT_CONSISTENCY_PROMPT(translation),
            ];
    }
};
